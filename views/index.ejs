<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitScan</title>
    <link rel="icon" type="image/png" href="/git-scan.png">
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="app-container">
        <!-- Header with the search bar -->
        <header id="header" class="header centered">
            <div class="header-left">
                <!-- Text Above the Search Bar -->
                <h1 class="header-text" id="header-text">GitScan - Secure Your Code</h1>
        
                <!-- Flex Container for Logo and Search Bar -->
                <div class="search-container">
                    <!-- Logo -->
                    <img src="/3.png" alt="GitScan Logo" id="gitscan-logo" class="hidden-logo">
                    
                    <!-- Search Form -->
                    <form id="analyze-form">
                        <input type="text" id="github-url" name="githubUrl" placeholder="Enter GitHub Repository URL" required>
                        <button type="submit">Analyze Repository</button>
                    </form>
                </div>
            </div>
            <img src="/1.png" alt="Floating Image 1" class="floating-image" id="image1">
            <img src="/3.png" alt="Floating Image 3" class="floating-image" id="image3">
        
        </header>
        
        

                <!-- Loading Spinner -->
                <div id="loading-spinner" class="loading-spinner" style="display: none;">
                    <div class="spinner"></div>
                <div>Please allow up to a minute as we retrieve and analyze the repository using our advanced, state-of-the-art algorithm. Thank you for your patience.</div>
                </div>

        <!-- Hidden Content Wrapper -->
        <div id="content-wrapper" style="display: none;">
            <div class="horizontal-bar">
                <!-- Community Score Block -->
                <div class="score-block">
                    <div class="score-circle">
                        <svg class="progress-ring" width="160" height="160">
                            <circle class="progress-ring__background" cx="80" cy="80" r="75" />
                            <circle class="progress-ring__circle" cx="80" cy="80" r="75" />
                            
                        </svg>
                        <div class="score-text">
                        <p id="community-score">0</p>
                        <span>/ 96</span>
                    </div>
                </div>
                <p class="community-score-label">Community Score</p>

            </div>
                
            
                <!-- Details Section -->
<!-- Details Section -->
<div class="details-block">
    <div class="details-row">
        <span class="details-status" id="repo-title">Repository Title</span>
    </div>
    <div class="details-row">
        <a href="#" id="repo-url" target="_blank" rel="noopener noreferrer">Repository URL</a>
    </div>
    <div class="details-row" id="file-types">
        <!-- File types badges dynamically populated -->
    </div>
    <div class="details-row">
        <span>Status: <strong id="status-code"></strong></span>
        <span>Content type: <strong id="content-type"></strong></span>
        <span>Last Analysis Date: <strong id="last-analysis"></strong></span>
    </div>
</div>

            </div>
            
            <section class="file-analysis">
                <h2>File Analysis</h2>
                <table id="file-analysis-table">
                    <thead>
                        <tr>
                            <th>File Name</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Size (KB)</th>
                            <th>Language</th>
                        </tr>
                    </thead>
                    <tbody id="file-rows">
                        <!-- Dynamically populated -->
                    </tbody>
                </table>
            </section>
        </div>

        <!-- Modal for OpenAI Analysis -->
        <div id="analysis-modal" class="modal">
            <div class="modal-content">
                <span id="close-modal" class="close-button">&times;</span>
                <h2>File Analysis</h2>
                <p id="analysis-text">Loading...</p>
            </div>
        </div>
    </div>

    <script>
document.getElementById('analyze-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const headerText = document.getElementById('header-text');
    if (headerText) {
        headerText.style.display = 'none';
    }

    document.querySelectorAll('.floating-image').forEach(image => {
        image.style.display = 'none';
    });
    const gitscanLogo = document.getElementById('gitscan-logo');

    const githubUrl = document.getElementById('github-url').value;
    const repoMatch = /github\.com\/([^\/]+)\/([^\/]+)/.exec(githubUrl);
    if (!repoMatch) {
        alert('Invalid GitHub URL. Please enter a valid repository URL.');
        return;
    }

    const [_, owner, repo] = repoMatch;

    // Show the loading spinner
    document.getElementById('loading-spinner').style.display = 'flex';


    try {
        // Fetch repository analysis data from your backend
        const res = await fetch('/api/analyze', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ githubUrl }),
        });

        const data = await res.json();

        if (data.success) {
            // Fetch repository metadata from the GitHub API
            
            header.classList.add('processed');
             
            gitscanLogo.classList.add('visible');

            const repoRes = await fetch(`https://api.github.com/repos/${owner}/${repo}`);
            const repoData = await repoRes.json();

            const communityScore = data.metrics.communityScore;

            window.onload = () => {
    document.querySelectorAll('.floating-image').forEach(image => {
        image.style.display = 'block';
    });
};

            // Update the community score and progress ring
            updateCommunityScore(communityScore);

            // Update the repository title
            document.getElementById('repo-title').innerText = repoData.full_name || 'Unknown Repository';

            // Update Community Score
            document.getElementById('community-score').innerText = data.metrics.securityRating || 0;

            // Update Repository URL
            document.getElementById('repo-url').innerText = githubUrl;
            document.getElementById('repo-url').href = githubUrl; // Set the href attribute


            // Update File Types
            const fileTypesContainer = document.getElementById('file-types');
            fileTypesContainer.innerHTML = Object.keys(data.metrics.fileTypes || {})
                .map(type => `<span class="badge">${type}</span>`)
                .join('');

            // Update Status, Content Type, Last Analysis
            document.getElementById('status-code').innerText = data.metrics.status || 'Unknown';

// Update the Content Type field
document.getElementById('content-type').innerText = data.metrics.repositoryType || 'Unknown';

// Add explanation for the safety status
const statusExplanation = document.createElement('p');
statusExplanation.innerText = `Explanation: ${data.metrics.statusExplanation || 'No explanation available.'}`;
document.getElementById('content-wrapper').appendChild(statusExplanation);

// Update Last Analysis Date
document.getElementById('last-analysis').innerText = data.metrics.lastAnalysisDate || 'N/A';

            // Populate File Analysis Table
            const rows = document.getElementById('file-rows');
            rows.innerHTML = data.report.map((file, index) => `
                <tr data-index="${index}">
                    <td>${file.filePath || 'Unknown'}</td>
                    <td>${file.filePath.split('.').pop() || 'Unknown'}</td>
                    <td>${file.analysis ? 'Clean' : 'Skipped'}</td>
                    <td>${(file.size || 0).toFixed(2)}</td>
                    <td>${file.language || 'Unknown'}</td>
                </tr>
            `).join('');

            // Add click event to rows for popup
            rows.querySelectorAll('tr').forEach(row => {
                row.addEventListener('click', () => {
                    const index = row.getAttribute('data-index');
                    const analysis = data.report[index].analysis || "No analysis available.";
                    document.getElementById('analysis-text').innerText = analysis;
                    document.getElementById('analysis-modal').style.display = 'flex';
                });
            });

            // Close Modal
            const closeModal = document.getElementById('close-modal');
            closeModal.addEventListener('click', () => {
                document.getElementById('analysis-modal').style.display = 'none';
            });

            // Close modal when clicking outside
            window.addEventListener('click', (event) => {
                const modal = document.getElementById('analysis-modal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });

            // Hide the loading spinner and display the content
            document.getElementById('loading-spinner').style.display = 'none';
            document.getElementById('header').classList.remove('centered');
            document.getElementById('content-wrapper').style.display = 'block';
        } else {
            console.error(data.message);
            document.getElementById('loading-spinner').style.display = 'none';
        }
    } catch (error) {
        console.error("Error analyzing the repository:", error.message);
        document.getElementById('loading-spinner').style.display = 'none';
    }
});

function updateCommunityScore(score) {
    const circle = document.querySelector('.progress-ring__circle');
    const radius = circle.r.baseVal.value;
    const circumference = 2 * Math.PI * radius;

    // Set circumference and offset
    circle.style.strokeDasharray = `${circumference}`;
    circle.style.strokeDashoffset = `${circumference - (score / 96) * circumference}`;

    // Set color based on score
    if (score >= 70) {
        circle.style.stroke = 'green';
    } else if (score >= 40) {
        circle.style.stroke = 'yellow';
    } else {
        circle.style.stroke = 'red';
    }

    // Update the score text
    document.getElementById('community-score').innerText = score;
}




    </script>
</body>
</html>
